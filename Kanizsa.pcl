# ------------------------------------------------------------------------------
#	SUBROUTINES FOR CONGRUENT-/INCONGRUENT-PRIMED REGULAR/IRREGULAR KANIZSA SHAPES
# ------------------------------------------------------------------------------

# DON'T FORGET TO MIRROR THE TIMING AND COLOR CONSTANTS IN THE SCE FILE!
rgb_color bg = rgb_color(0, 0, 0, 0); ##0,0,0,0
rgb_color fg = rgb_color(255, 255, 255, 0);
rgb_color trans = rgb_color(255, 0, 0, 0);
int KNZA_DUR = forever;
int INTF_DUR = 150;
int SOA_LOWER_DUR = 400;
int SOA_UPPER_DUR = 600;

# display_device.width seems to return an int (which is not what the documentation suggests)
int screen_width = display_device.width(); 		#display_device.width();
int screen_height = display_device.height(); 		#display_device.height();

# Diameter of the Pacmen
double dmtr = double(screen_height) / 6.0;
if screen_height > screen_width then
	dmtr = double(screen_width) / 6.0;
end;

# highest absolute value of y-coordinate on the screen
double total_max_y = double(display_device.height()/2);
# highest absolute value of x-coordinate
double total_max_x = double(display_device.width()/2);

# for randomized coordinates, highest acceptable x- or y-coordinate absolute value for quadrangle
int max_y = int(total_max_y - 2.0 * dmtr);
int max_x = int(total_max_x - 2.0 * dmtr);

# lowest acceptable x- or y-coordinate absolute value for quadragle is diameter of the pacman plus 10px
int min_y = int(dmtr + 20.0);
int min_x = int(dmtr + 20.0);

#######-------#######-------#######-------#######-------#######-------#######-------
#	Creates a polygon specified by the coordinates in parameter 1.
#	coors			: array of intergers specifying coordinates of the polygon.
#	dims			: width, height dimensions of the pacmen. All are round, equal-sized shapes, i.e. only one value needed for annuli, dims specifies the width and height of the outermost annulus
#	prime			: whether this should be a primer (lines) or target (pacmen) stimulus
#	pacmantype	: whether we use annuli or ellipse pacmen - probably to be redacted for real experiment.
#
sub
	polyfilla( array< double,2 >& coors, double dims, bool prime, string pacmantype )
begin
	pyc.clear();
	lyne.clear();
	# Fix the lyne properties
	lyne.add_line( coors[1][1], coors[1][2], coors[2][1], coors[2][2] );
	lyne.set_next_join_type( join_circle );
	loop
		int i = 3;
		int j = 1;
	until
		i > coors.count()
	begin
		lyne.line_to( coors[i][j], coors[i][j+1] );
		i = i + 1;
	end;
	lyne.line_to( coors[1][1], coors[1][2]);
	if prime == false then
		# Pick a pacman
		if pacmantype == "ellipse" then
			pacman_e.set_dimensions( dims, dims );
			pacman_e.set_color( fg );
			pacman_e.redraw();
			loop
				int i = 1;
				int j = 1;
			until
				i > coors.count()
			begin
				pyc.add_part(pacman_e, coors[i][j], coors[i][j+1]);
				i = i + 1;
			end;
		end;
		if pacmantype == "annulus" then
			double dims1_in = (dims/2.0)*0.75;
			double dims1_out = dims/2.0 ;
			double dims2_in = dims *0.75 ;
			double dims2_out = dims ;
			annulus1.set_dimensions(dims1_in, dims1_in, dims1_out, dims1_out);
			annulus2.set_dimensions(dims2_in, dims2_in, dims2_out, dims2_out);
			loop
				int i = 1;
				int j = 1;
			until
				i > coors.count()
			begin
				pyc.add_part(annulus1, coors[i][j], coors[i][j+1]);
				pyc.add_part(annulus2, coors[i][j], coors[i][j+1]);
				annulus1.redraw();
				annulus2.redraw();
				i = i + 1;
			end;
		end;
		# Set the lyne properties
		lyne.set_line_color( bg );
		lyne.set_next_fill_color( bg );
	# If prime is true, just draw the outline shape
	else
		lyne.set_line_color( fg );
		lyne.set_next_fill_color( bg );
	end;
	lyne.close(true);
	lyne.redraw();
	pyc.add_part( lyne, 0, 0 );
end;




#######-------#######-------#######-------#######-------#######-------#######-------
#	Subroutine to rotate a matrix about one of its own vertices
#	Returns the rotated matrix.
#	cs		:	vertex coordinate matrix
#	v		:	vertex to rotate about
#	rot	:	rotation angle
#
sub
	array< double,2 > rotateMat( array< double,2 >& cs, int v, double rot )
begin
	# Coordinate count
	int cnt = cs.count();
	# Return value
	array< double > out[cnt][2];
	# Offset of focal vertex from origin
	double tranX = 0.0 - cs[v][1];
	double tranY = 0.0 - cs[v][2];
	# Translate to global coordinate space origin
	loop
		int i = 1;
	until
		i > cnt
	begin
		cs[i][1] = cs[i][1] + tranX;
		cs[i][2] = cs[i][2] + tranY;
		i = i+1;
	end;
	# ROTATE MATRIX
	loop
		int i = 1;
	until
		i > cnt
	begin
		out[i][1] = cs[i][1]*cos(rot) - cs[i][2]*sin(rot);	# x' of vertex i
		out[i][2] = cs[i][1]*sin(rot) + cs[i][2]*cos(rot);	# y' of vertex i
		i = i+1;
	end;
	# Perform reverse translation
	loop
		int i = 1;
	until
		i > cnt
	begin
		out[i][1] = out[i][1] - tranX;
		out[i][2] = out[i][2] - tranY;
		i = i+1;
	end;
	return out;
end;




#######-------#######-------#######-------#######-------#######-------#######-------
#	A subroutine to make sure that Pacman triangles cover their ellipse, returns coordinates of rectangle necessary to correct.
#	Returns true if the triangle already covered the roundy - false if a rectangle was needed.
#	c		: coordinate matrix holds the triangle to be checked
#	dims	: diameter of the Pacman - i.e. triangle height must be greater than half of this
#	http://math.stackexchange.com/questions/25286/2d-coordinates-of-a-point-along-a-line-based-on-d-and-m-where-am-i-messing
#
sub
	bool correctTri( array< double,2 >& c, double dims )
begin
	# Return value
	array< double > rect[4][2];
	# Measure the height of the triangle. Coordinate 2 will be the apex.
	# Area = http://www.mathopenref.com/coordtrianglearea.html
	double area = abs((c[1][1]*(c[2][2] - c[3][2]) +
							 c[2][1]*(c[3][2] - c[1][2]) +
							 c[3][1]*(c[1][2] - c[2][2]) )/2.0);
	# Euclidean distance between contra-apical vertices is the triangle base length
	double xdiffb = c[1][1] - c[3][1];
	double ydiffb = c[1][2] - c[3][2];
	double base = sqrt( (xdiffb*xdiffb) + (ydiffb*ydiffb) );
	# Area equals half of height by base, so the apex-base-intersect lyne (abil) height is:
	double height = (area*2.0)/base;
	# Check if this has covered the round shape to create a convincing Pacman
	if height < dims/2.0 then
		# Extension length = Pacman radius minus existing triangle height
		double h = dims/2.0 - height;
		# Init slope, orientation and offset variables.
		double mh = 0.0;	# Set default for if base is horizontal
		double mb = 0.0;
		double fx = 0.0;	# Set default for if base is horizontal
		double fy = 0.0;
		double deltx = h;
		double delty = h;
	# onyl need thse defined here for debugging
		double ax = 1.0;
		double ay = 1.0;
		######	MUST ORIENT NEW RECTANLGE CORRECTLY!	######
		# If y diffs are 0 then base is horizontal (slope 0), abil is vertical (slope undefined); otherwise:
		if ydiffb != 0.0 then
			# If x diffs are 0 then base is vertical (slope undefined), abil is horizontal (slope 0); otherwise:
			if xdiffb != 0.0 then
				# Slope of base
				mb = ydiffb / xdiffb;
				# Slope of apex-base intersect
				mh = -1.0 / mb;
				# angle of the abil with respect to x-axis
				double alpha = arctan( mh );
				# Offset of the new x,y points (wrt to the base vertices)
				deltx = abs(h*cos( alpha ));
				delty = abs(h*sin( alpha ));

				#	Apex-base intersection point - solve for x and y from the point-slope equations
				ax = (mb*c[1][1] - mh*c[2][1] - c[1][2] + c[2][2]) / (mb - mh);
				ay = (mh*ax - mh*c[2][1]) + c[2][2];
				# Offset orientation of new x,y points with respect to apex point
				if ax < c[2][1] then
					fx = -1.0;
				else
					fx = 1.0;
				end;
				if ay < c[2][2] then
					fy = -1.0;
				else
					fy = 1.0;
				end;
			else
				# difference in x for apex and one base vertex
				fx = (c[1][1] - c[2][1]) / abs(c[1][1] - c[2][1]);
			end;
		else
			# difference in y for apex and one base vertex
			fy = (c[1][2] - c[2][2]) / abs(c[1][2] - c[2][2]);
		end;
		# Orientation and offset in x and y
		fx = deltx*fx;
		fy = delty*fy;
		# Extra points needed. If triangle base is vertical, y's are unchanged. If horizontal, x's unchanged.
		double p4x = c[1][1] + fx;	double p4y = c[1][2] + fy;
		double p3x = c[3][1] + fx;	double p3y = c[3][2] + fy;
		# Finally populate new polygon to cover Pacman
		rect[1][1] = c[1][1];	rect[1][2] = c[1][2];
		rect[2][1] = c[3][1];	rect[2][2] = c[3][2];
		rect[3][1] = p3x; 		rect[3][2] = p3y;
		rect[4][1] = p4x; 		rect[4][2] = p4y;

		# Draw the correction polygon
		lyne.add_polygon( rect, true, 1.0, 0.0 );

		# If we can't get the damn fill part to work, try sending back a signal to go for new random coordinates.
		return false;
	end;
	return true;
end;


#######-------#######-------#######-------#######-------#######-------#######-------
#	Subroutine to get the Euclidean distance between two vertices, i.e. x1, y1 & x2, y2
#	Returns the relevant distance.
#	x1		: vertex one's x value.
#	y1		: vertex one's y value.
#	x2		: vertex one's x value.
#	y2		: vertex one's y value.#
#
sub
	double euc( double x1, double y1, double x2, double y2 )
begin
	double xdiff = x1 - x2;
	double ydiff = y1 - y2;
	double euc = sqrt( (xdiff*xdiff) + (ydiff*ydiff) );
	return euc;
end;



#######-------#######-------#######-------#######-------#######-------#######-------
#	Subroutine which returns an appropriate triangle to draw over a roundy thing and get a Pacman
#	Returns a
#	cs		: coordinates of the original roundy
#	dm		: diameter of the roundy - triangles gotta be broader than this
#	idx	: index of coordinate to form triangle from interval vertex arrays, next:
#	mids	: midpoints of roundys
#	thrd	: one-third points of roundys
#	twth	: two-third points of roundys
#
sub
	array< double,2 > triFill( array< double,1 >& cs, double dm, array< double,1 >& mid1, array< double,1 >& mid3, array< double,1 >& thrd, array< double,1 >& twth )
begin
	# Return value - one triangle with the original coordinate at index 2 = apex.
	array< double > out[3][2];
	# The triangle apex
	out[2][1] = cs[1];
	out[2][2] = cs[2];
	# Pick the first point - either last midpoint or last two-thirds point.
	if euc( cs[1], cs[2], twth[1], twth[2] ) > dm/2.0 then
		out[1][1] = twth[1];
		out[1][2] = twth[2];
	else
		out[1][1] = mid1[1];
		out[1][2] = mid1[2];
	end;
	# Pick the last point - either next midpoint or next one-third point.
	if euc( cs[1], cs[2], thrd[1], thrd[2] ) > dm/2.0 then
		out[3][1] = thrd[1];
		out[3][2] = thrd[2];
	else
		out[3][1] = mid3[1];
		out[3][2] = mid3[2];
	end;

	return out;
end;

#######-------#######-------#######-------#######-------#######-------#######-------
#	Subroutine to generate a Kanizsa stimuli with randomly oriented Pacmen. This is deterministic
#	i.e. all randomness is generated outside and passed in so results can be replicated.
#	coors			: array of intergers specifying coordinates of the polygon.
#	dims			: width, height of Pacmen. As all are round, equal-sized shapes, only one value needed i.e. for annuli, dims = width and height of outermost annulus
#	prime			: whether this should be a primer (lines) or target (pacmen) stimulus
#	pacmantype	: whether we use annuli or ellipse pacmen - probably to be redacted for real experiment.
#	rts			: an array of degrees of rotation, useful to make two identically randomised nonshapes - primer and Kanizsa
#
sub
	nonshape( array< double,2 >& coors, double dims, bool prime, string pacmantype, array< double,1 >& rts )
begin
	pyc.clear();
	lyne.clear();

	# Coordinate count
	int cnt = coors.count();

	# Get midpoints so we can draw triangles into the Pacmen.
	array< double > mids[cnt][2];
	# Get points between mid and coors so we can draw smaller triangles into the Pacmen.
	array< double > thrd[cnt][2];
	# Get points between mid and coors+1 so we can draw triangles into the Pacmen.
	array< double > twth[cnt][2];

	double xt;
	double yt;
	loop
		int i = 1;
	until
		i > cnt
	begin
		mids[i][1] = (coors[i][1] + coors[i%cnt+1][1])/2.0;		mids[i][2] = (coors[i][2] + coors[i%cnt+1][2])/2.0;

		if prime == true then
			# Choose longer lines to display salience better
			thrd[i][1] = (coors[i][1]*2.0 + coors[i%cnt+1][1])/3.0;	thrd[i][2] = (coors[i][2]*2.0 + coors[i%cnt+1][2])/3.0;
			twth[i][1] = (coors[i][1] + coors[i%cnt+1][1]*2.0)/3.0;	twth[i][2] = (coors[i][2] + coors[i%cnt+1][2]*2.0)/3.0;
		else
			# Choose shorter lines to prevent covering other Pacmen inadvertently
			# We select nearest valid point to coors.i x, y
			xt = mids[i][1];
			yt = mids[i][2];
			loop
				double dist = euc(coors[i][1], coors[i][2], xt, yt);
			until
				dist < dmtr + 20.0
			begin
				# update xt, yt
				#xt = midpoint of coors x, xt
				xt = (coors[i][1] + xt)/2.0;
				#yt = midpoint of coors y, yt
				yt = (coors[i][2] + yt)/2.0;
				dist = euc(coors[i][1], coors[i][2], xt, yt);
			end;
			thrd[i][1] = xt;	thrd[i][2] = yt;

			# We select nearest valid point to coors.i+1 x, y (have to mod i by the count of vertices to wrap around)
			xt = mids[i][1];
			yt = mids[i][2];
			loop
				double dist = euc(coors[i%cnt+1][1], coors[i%cnt+1][2], xt, yt);
			until
				dist < dmtr + 20.0
			begin
				# update xt, yt
				#xt = midpoint of coors x, xt
				xt = (coors[i%cnt+1][1] + xt)/2.0;
				#yt = midpoint of coors y, yt
				yt = (coors[i%cnt+1][2] + yt)/2.0;
				dist = euc(coors[i%cnt+1][1], coors[i%cnt+1][2], xt, yt);
			end;
			twth[i][1] = xt;	twth[i][2] = yt;
		end;
		i = i+1;
	end;

	# Create triangle array
	array< double > tri[3][2];
#	triFill( coors[x]...diameter, array<> mid1, array<> mid3, array<> qrtr, array<> thrd, array<> thqt, array<> twth )

	# Adjust behaviour for primer or Kanizsa
	if prime == false then
		# Set the requisite Kanizsa shape properties
		lyne.set_line_color( bg );
		lyne.set_next_fill_color( bg );
		# Initialise triangle vertices to fill the first Pacman
		tri = triFill( coors[1], dims, mids[cnt], mids[1], thrd[1], twth[cnt] );
#		tri[1] = thrd[cnt];		tri[2] = coors[1];		tri[3] = twth[1];
		# Rotate the triangle first
		tri = rotateMat(tri, 2, rts[1]);
		# Add the triangle polygon
		lyne.add_polygon( tri, true, 1.0, 0.0 );
		# Check the triangle has filled the Pacman
		correctTri(tri, dims);
		# Do likewise for all other Pacmen
		loop
			int k = 2;
		until
			k > cnt
		begin
			tri = triFill( coors[k], dims, mids[k-1], mids[k], thrd[k], twth[k-1] );
#			tri[1] = thrd[k-1];		tri[2] = coors[k];		tri[3] = twth[k];
			tri = rotateMat(tri, 2, rts[k]);
			lyne.add_polygon( tri, true, 1.0, 0.0 );
			correctTri(tri, dims);
			k = k+1;
		end;

		# Pick a Pacman type - Ellipse, Annullus or wrong.
		if pacmantype == "ellipse" then
			pacman_e.set_dimensions( dims, dims );
			pacman_e.set_color( fg );
			loop
				int i = 1;
			until
				i > cnt
			begin
				pyc.add_part(pacman_e, coors[i][1], coors[i][2]);
				i = i+1;
			end;
			pacman_e.redraw();
		elseif pacmantype == "annulus" then
			double dims1_in = (dims/2.0)*0.75; 		#(dims/2.0)*0.75;
			double dims1_out = dims/2.0 ;	 			#dims/2.0;
			double dims2_in = dims *0.75 ;  			#dims*0.75;
			double dims2_out = dims ;					#dims
			annulus1.set_dimensions(dims1_in, dims1_in, dims1_out, dims1_out);
			annulus2.set_dimensions(dims2_in, dims2_in, dims2_out, dims2_out);
			loop
				int i = 1;
			until
				i > cnt
			begin
				pyc.add_part(annulus1, coors[i][1], coors[i][2]);
				pyc.add_part(annulus2, coors[i][1], coors[i][2]);
				annulus1.redraw();
				annulus2.redraw();
				i = i+1;
			end;
		else
			return; # NO VALID PACMAN GIVEN. WTF?
		end;

	#### If prime is true, just draw the outline shape ####
	else
		# Set the requisite primer colours
		lyne.set_line_color( trans ); # trans for red, fg for white
		lyne.set_next_fill_color( bg );
		# Initialise triangle vertices to fill the first Pacman
		tri = triFill( coors[1], dims, mids[cnt], mids[1], thrd[1], twth[cnt] );
#		tri[1] = thrd[cnt];		tri[2] = coors[1];		tri[3] = twth[1];
		# Rotate the triangle first
		tri = rotateMat(tri, 2, rts[1]);
		# Then add the two required lines. No need to check for Pacman fill here!
		lyne.add_line( tri[1][1], tri[1][2], tri[2][1], tri[2][2] );
		lyne.line_to( tri[3][1], tri[3][2] );
		# Now do likewise for all remaining Pacmen
		loop
			int k = 2;
		until
			k > cnt
		begin
			tri = triFill( coors[k], dims, mids[k-1], mids[k], thrd[k], twth[k-1] );
#			tri[1] = thrd[k-1];		tri[2] = coors[k];		tri[3] = twth[k];
			tri = rotateMat(tri, 2, rts[k]);
			lyne.add_line( tri[1][1], tri[1][2], tri[2][1], tri[2][2] );
			lyne.line_to( tri[3][1], tri[3][2] );
			k = k+1;
		end;
/**
	USE THIS BLOCK TO ADD DISKS IN THE PRIMER AS WELL AS THE TARGET!!
*/
		# Pick a Pacman type - Ellipse, Annullus or wrong.
		if pacmantype == "ellipse" then
			pacman_e.set_dimensions( dims, dims );
			pacman_e.set_color( fg );
			loop
				int i = 1;
			until
				i > cnt
			begin
				pyc.add_part(pacman_e, coors[i][1], coors[i][2]);
				i = i+1;
			end;
			pacman_e.redraw();
		elseif pacmantype == "annulus" then
			double dims1_in = (dims/2.0)*0.75; 		#(dims/2.0)*0.75;
			double dims1_out = dims/2.0 ;	 			#dims/2.0;
			double dims2_in = dims *0.75 ;  			#dims*0.75;
			double dims2_out = dims ;					#dims
			annulus1.set_dimensions(dims1_in, dims1_in, dims1_out, dims1_out);
			annulus2.set_dimensions(dims2_in, dims2_in, dims2_out, dims2_out);
			loop
				int i = 1;
			until
				i > cnt
			begin
				pyc.add_part(annulus1, coors[i][1], coors[i][2]);
				pyc.add_part(annulus2, coors[i][1], coors[i][2]);
				annulus1.redraw();
				annulus2.redraw();
				i = i+1;
			end;
		else
			return; # NO VALID PACMAN GIVEN. WTF?
		end;
/**/
	end;

	lyne.redraw();
	pyc.add_part( lyne, 0, 0 );

end;


#######-------#######-------#######-------#######-------#######-------#######-------
#  subroutine that returns an [i][2] array of randomized coordinates
#	regPoly	:	true = regular - coordinates creates a regular shape, false = irregular - coordinates create an irregular shape
#  vts		:	number of vertices in the shape
#
sub
   array< double,2 > randCS( bool regPoly, int vts )
begin
	# Return value
	array< double > out[vts][2];

	# Randomly generate the coordinates within certain constrainted screen areas.
	# If REGULAR polygon:
	if regPoly == true then

		if vts == 4 then
			out[1][1] = double(random(-1* max_x, -1* min_x)); 		#(random(-250, -85)
			out[1][2] = double(random(min_y, max_y));					#(random(250, 85))
			#save the constant values
			double constant_x = out[1][1];
			double constant_y = out[1][2];
			#assign the rest of the coordinate values
			out[2][1] = -1.0*constant_x;
			out[2][2] = constant_y;
			out[3][1] = -1.0*constant_x;
			out[3][2] = -1.0*constant_y;
			out[4][1] = constant_x;
			out[4][2] = -1.0*constant_y;
		else
			vts = random(1, 2);
			double flip = 0.0;
			# Make a triangle with a horizontal base and up or down-pointing apex.
			if vts == 1 then
				out[1][1] = double(random(-1*max_x, max_x)); 		#random(-250, 250)
				out[1][2] = double(random(min_y, max_y));				#random(250, 85)
				# If point 1 has landed in the (vertically) central region, we have an up-pointing triangle.
				# Note exclusion zone is roughly 50% of probability space
				if out[1][1] < double((max_x/2)) && out[1][1] > double(-1*(max_x/2)) then 		#out[1][1] < 125.0 || out[1][1] > -125.0
					# Both other vertices will be in lower half
					# X points of v2 & v3 will be eqidistant from v1:x1
					flip = double(random(min_x/2, max_x/2));
					out[2][1] = flip+out[1][1];
					out[2][2] = -1.0*out[1][2];
					out[3][1] = out[1][1]-flip;
					out[3][2] = -1.0*out[1][2];
				# Otherwise we have a down-pointing triangle and vertex 2 is mirror of v1
				else
					out[2][1] = -1.0*out[1][1];
					out[2][2] = out[1][2];
					out[3][1] = 0.0;
					out[3][2] = -1.0*out[1][2];
				end;
			# Make a triangle with a vertical base and left or right pointing apex.
			else #if vts == 2 then
				out[1][1] = double(random(-1*max_x, -1*min_x)); 	#random(-250, -85)
				out[1][2] = double(random(-1*max_y, max_y));		#random(-250, 250)
				# If point 1 has landed in the (horizontally) central region, we have an left-pointing triangle.
				if out[1][2] < double((max_y/2)) && out[1][2] > double(-1*(max_y/2)) then
					# Both other vertices will be in right half
					# Y points of v2 & v3 will be eqidistant from v1:y1
					flip = double(random(min_y/2, max_y/2));
					out[2][1] = -1.0*out[1][1];
					out[2][2] = flip+out[1][2];
					out[3][1] = -1.0*out[1][1];
					out[3][2] = out[1][2]-flip;
				# Otherwise we have a right-pointing triangle and vertex 2 is mirror of v1
				else
					out[2][1] = out[1][1];
					out[2][2] = -1.0*out[1][2];
					out[3][1] = -1.0*out[1][1];
					out[3][2] = 0.0;
				end;
			end;
		end;
	# if IRREGULAR polygon
	else #if regPoly is false

		if vts == 4 then
			out[1][1] = double(-1*random(max_x, min_x));		 # -250, -85
			out[1][2] = double(random(min_y, max_y)); 			#double(random(250, 85)); -> should've been (85, 250)
			out[2][1] = double(random(min_x, max_x));				#double(random(85, 250));
			out[2][2] = double(random(min_y, max_y));				#double(random(85, 250));
			out[3][1] = double(random(min_x, max_x));				#double(random(85, 250));
			out[3][2] = double(-1*random(min_y, max_y));			#double(random(-85, -250));
			out[4][1] = double(-1*random(min_x, max_x));			#double(random(-85, -250));
			out[4][2] = double(-1*random(min_y, max_y));			#double(random(-85, -250));
		else
			vts = random(1, 2);
			# Make a triangle with an up or down-pointing apex.
			if vts == 1 then
				out[1][1] = double(random(-1*max_x, min_x)); 		#(random(-250, 85));
				out[1][2] = double(random(min_y, max_y));				#(random(250, 85));
				# If vertex 1 has landed in the top left quadrant, we have a down-pointing triangle.
				if out[1][1] < double(-1*min_x) then
					# Next vertex will be in top right quadrant
					out[2][1] = double(random(min_x, max_x));			#(random(85, 250));
					out[2][2] = double(random(min_y, max_y));			#(random(85, 250));
					# Last vertex somewhere in the centre of the bottom half
					out[3][1] = double(random(-1*(max_x/2), max_x/2));			#(-125, 125));
					out[3][2] = double(-1*random(min_y, max_y));				#(-85, -250));
				# Otherwise vertex 1 is centrally located, we have an up-pointing triangle.
				else
					# Next vertex will be in bottom right quadrant
					out[2][1] = double(random(min_x, max_x));
					out[2][2] = double(-1*random(min_y, max_y));
					# Last vertex somewhere in bottom left quadrant
					out[3][1] = double(-1*random(min_x, max_x));
					out[3][2] = double(-1*random(min_y, max_y));
				end;
			# Make a left or right pointing triangle.
			else #if vts == 2 then
				# Put the first point somewhere in the left half, from below y axis to max_y
				out[1][1] = double(random(-1*max_x, -1*min_x)); 	#(random(-250, -85));
				out[1][2] = double(random(-1*min_y, max_y));			#(random(250, -85));
				# If vertex 1 has landed in the top left quadrant, we have a right-pointing triangle.
				if out[1][2] > double(min_y) then
					# Next vertex will be in bottom left quadrant
					out[2][1] = double(-1*random(min_x, max_x));
					out[2][2] = double(-1*random(min_y, max_y));
					# Last vertex somewhere in the centre of the right half
					out[3][1] = double(random(min_x, max_x));
					out[3][2] = double(random(-1*(max_y/2), max_y/2));
				# Otherwise vertex 1 is centrally located in y, we have a left-pointing triangle.
				else
					# Next vertex will be in top right quadrant
					out[2][1] = double(random(min_x, max_x));
					out[2][2] = double(random(min_y, max_y));
					# Last vertex somewhere in bottom right quadrant
					out[3][1] = double(random(min_x, max_x));
					out[3][2] = double(-1*random(min_y, max_y));
				end;
			end;
		end;
	end;

	return out;
end;


#######-------#######-------#######-------#######-------#######-------#######-------
#	Subroutine that generates randomized rotation angles for non shape Kanizsas. If both min & max = 0, output passed to nonshapes() will generate a shape.
#	If min > 0 and max = 0, angles returned will be constant, i.e. equal to min
#	size	: number of elements in the array
#	min	: the offset or lowest rotation angle we can generate
#	max	: the largest angle - remember that the actual upper bound is equal to max + min, so if min > 0, subtract min from the desired upper bound to get max.
#
sub
	array< double,1 > randR( int size, double min, double max )
begin
	# Resize rotation angles array to current size
	array <double> rnd[size];
	loop
		int r = 1;
	until
		r > size
	begin
		rnd[r] = random()*max + min;
		r = r+1;
	end;

	return rnd;
end;



#######-------#######-------#######-------#######-------#######-------#######-------
#	Subroutine that generates randomized kanizsa stimuli and primers
#	regPoly		: this block will use regular:true or irregular:false shapes - we hypothesise that irregulars present a more difficult distinction with more mixed-up visual cues
#	pacmantype	: this block will use ellipses or annuli as Pacmen - we hypothesise that annuli present a more difficult distinction with less visible angle (i.e. more is implied than shown)
#	blockN		: the number of this block, increasing in increments of 10 from 0
#	trialN		: the number of trials in this block
#
sub
	saliency( bool regPoly, string pacmantype, int blockN, int trialN )
begin
	# Handy random number for making choices
	double random_num = random();

	# Control the number of vertices - this is just to maintain unpredictability
	int vtx = random(3, 4);
	# COORDINATE ARRAY
	array <double> CS[vtx][2];
	# Random rotation angles array
	array< double > rnd[vtx];
	# Rotation angles constraints, min, mux (= max - min)
	double min = 20.0;
	double mux = 320.0;

	# Set which trial type we have : congruent or incongruent
	string trialtype;

	# MY BIG FAT TRIAL GENERATING LOOP
	loop
		int i = trialN
	until
		i == 0
	begin
		#fixation period
		fixation_trial.present();
/**
Comment away if we want a fixed vertex count (triangles or quandrangles) FOR THIS BLOCK
Get a Random number of vertices for the primer and Kanizsa, then resize arrays to current size
*/
		vtx = random(3, 4);
		CS.resize( vtx );
		rnd.resize( vtx );
/**/
		# first randomize the coordinates for both stimuli
		CS = randCS( regPoly, vtx );

	   # save coordinates in a string "log_coors" for the log file
		string log_coors = "  [";
		loop
			int k = 1
		until
			k == vtx + 1
		begin
			log_coors = log_coors + " " + string(CS[k][1]) + ",";
			log_coors = log_coors + " " + string(CS[k][2]) + ",";
			k = k + 1;
		end;
		log_coors = log_coors + ",";
		log_coors = log_coors + "]";

		#randomize trialtype (congruent vs. incongruent)
		random_num = random();
		if random_num > 0.5 then
			trialtype = "congruent";
		else
			trialtype = "incongruent";
		end;

		# IF statement picks shape vs. nonshape (e.g. if the target is a shape or a nonshape)
		#
		# TARGET IS A SHAPE
		if random() > 0.5 then
			if trialtype == "congruent" then
				#SHAPE PRIMER
					# fix the rotations at zero to draw a shape
					rnd = randR( vtx, 0.0, 0.0 );
					#show subjective shape primer
					nonshape(CS, dmtr, true, pacmantype, rnd );
					ev.set_event_code( log_coors  + ";" + string(151 + blockN) + ";Congruent;shape;primer;" + string(vtx) );	ev.set_port_code( 151+blockN );	ev.set_target_button( 0 );	# NO RESPONSE
					Kanizsa.set_duration( INTF_DUR );	Kanizsa.set_type( fixed );	Kanizsa.present();

				#SHAPE TARGET
					polyfilla(CS, dmtr, false, pacmantype);
					ev.set_event_code( log_coors  + ";" + string(152 + blockN) + ";Congruent;shape;target;" + string(vtx)  );	ev.set_port_code( 152+blockN );	ev.set_target_button( 2 );	# RIGHT-HAND RESPONSE
					Kanizsa.set_duration( KNZA_DUR );	Kanizsa.set_type( first_response );	Kanizsa.present();
			end;
			if trialtype == "incongruent" then  #primer is a nonshape
				#NONSHAPE PRIMER
					rnd = randR( vtx, min, mux );
					# show nonshape primer
					nonshape(CS, dmtr, true, pacmantype, rnd );
					ev.set_event_code( log_coors  + ";" + string(153 + blockN) + ";InCon;nonShape;primer;" + string(vtx)  );	ev.set_port_code( 153+blockN );	ev.set_target_button( 0 );	# NO RESPONSE
					Kanizsa.set_duration( INTF_DUR );	Kanizsa.set_type( fixed );	Kanizsa.present();

				#SHAPE TARGET
					polyfilla(CS, dmtr, false, pacmantype);
					ev.set_event_code( log_coors  + ";" + string(154 + blockN) + ";InCon;shape;target;" + string(vtx) );	ev.set_port_code( 154+blockN );	ev.set_target_button( 2 );	# RIGHT-HAND RESPONSE
					Kanizsa.set_duration( KNZA_DUR );	Kanizsa.set_type( first_response );	Kanizsa.present();
			end;
		# TARGET IS A NON-SHAPE
		else
			if trialtype == "congruent" then #primer is a nonshape
				# randomize the rotations, same for both
				rnd = randR( vtx, min, mux );
				#NONSHAPE PRIMER
					# show nonshape primer
					nonshape(CS, dmtr, true, pacmantype, rnd);
					ev.set_event_code( log_coors  + ";" + string(155 + blockN) + ";Congruent;nonShape;primer;" + string(vtx) );	ev.set_port_code( 155+blockN );	ev.set_target_button( 0 );	# NO RESPONSE
					Kanizsa.set_duration( INTF_DUR );	Kanizsa.set_type( fixed );	Kanizsa.present();

				#NONSHAPE TARGET
					nonshape(CS, dmtr, false, pacmantype, rnd);
					ev.set_event_code( log_coors  + ";" + string(156 + blockN) + ";Congruent;nonShape;target;" + string(vtx) );	ev.set_port_code( 156+blockN );	ev.set_target_button( 1 );	# LEFT-HAND RESPONSE
					Kanizsa.set_duration( KNZA_DUR );	Kanizsa.set_type( first_response );	Kanizsa.present();
			end;
			if trialtype == "incongruent" then #primer is a shape
				#SHAPE PRIMER
					# fix the rotations at zero to draw a shape
					rnd = randR( vtx, 0.0, 0.0 );
					# show subjective shape primer
					nonshape(CS, dmtr, true, pacmantype, rnd );
					ev.set_event_code( log_coors  + ";" + string(157 + blockN) + ";InCon;shape;primer;" + string(vtx) );	ev.set_port_code( 157+blockN );	ev.set_target_button( 0 );	# NO RESPONSE
					Kanizsa.set_duration( INTF_DUR );	Kanizsa.set_type( fixed );	Kanizsa.present();

				#NONSHAPE TARGET
					# randomize the rotations
					rnd = randR( vtx, min, mux );
					# show nonshape primer
					nonshape(CS, dmtr, false, pacmantype, rnd );
					ev.set_event_code( log_coors  + ";" + string(158 + blockN) + ";InCon;nonShape;target;" + string(vtx)  );	ev.set_port_code( 158+blockN );	ev.set_target_button( 1 );	# LEFT-HAND RESPONSE
					Kanizsa.set_duration( KNZA_DUR );	Kanizsa.set_type( first_response );	Kanizsa.present();
			end;
		end;

		i = i-1;

		#intertrial interval
		SOA_trial.set_duration( random(SOA_LOWER_DUR, SOA_UPPER_DUR) );
		SOA_trial.present();

	end;
end;
